#!/usr/bin/env python

import io
import os
import sys
import pytz
import time 
import psutil
import logging
import datetime
import threading
import ConfigParser

logging.basicConfig(level=logging.INFO)
GMT = pytz.timezone('GMT')

from pyjabberbot import PersistentBot, botcmd


def get_midnight():
    today = datetime.datetime.now(GMT)
    tomorrow = today + datetime.timedelta(days=1)
    return tomorrow.replace(hour=0, minute=0, second=0,
        microsecond=0)


def get_sidc_config():
    sidc_list = filter(lambda p: p.name == 'sidc', psutil.process_iter())
    if len(sidc_list)==0:
        return (-1, 'No sidc instance found. Data stream disabled')
    elif len(sidc_list)>1:
        return (-1, 'Multiple sidc instances found - not supported')

    sidc = sidc_list[0]

    # only default location supported
    cfg_file = '/etc/sidc.conf'
    if not os.path.exists(cfg_file):
        return (-1, '%s not found' % cfg_file)

    if not os.access(cfg_file, os.R_OK):
        return (-1, 'Unable to read %s, check permissions ' % cfg_file)

    cfg_contents = open(cfg_file).readlines()
    cfg_contents = filter(lambda x: len(x)>0 and x[0] != ';',
        map(lambda x: x.strip(), cfg_contents))

    cfg = {}
    bands = {}
    for item in cfg_contents:
        parts = map(lambda x: x.strip(), item.split())
        i = 1
        while parts[i] != ';':
            i += 1
            if i == len(parts):
                break

        if parts[0] == 'band':
            bands[parts[1]] = parts[2:i]
        else:
            # if options expects multiple args save them as list
            cfg[parts[0]] = parts[1:i] if i>2 else parts[1]

    return (0, cfg)

class DataSender(PersistentBot):
    """ Data sending bot """

    def __init__(self, jid, password, whitelist, res = None):
        super(DataSender, self).__init__(jid, password, res)

        self.users = []
        self.ignore_offline = True
        self.whitelist = whitelist
        self.message_queue = []
        self.thread_killed = False
        self.sidc = False
        self.cfg = None
        self.status_reload = False
        self.update_status = ''
        self.frames = 0
        self.room = ''

    def whitelisted(self, msg):
        """ Check whitelist """
        return msg.getFrom().getStripped() in self.whitelist

    @botcmd
    def subscribe(self, msg, args):
        """ Subscribe to the broadcast list """
        user = msg.getFrom()
        if not self.whitelisted(msg):
            return 'You are not allowed to subscribe'
        if user in self.users:
            return 'You are already subscribed.'
        else:
            self.users.append(user)
            return 'You are now subscribed.'

    @botcmd
    def unsubscribe(self, msg, args):
        """ Unsubscribe from the broadcast list """
        user = msg.getFrom()
        if not user in self.users:
            return 'You are not subscribed!'
        else:
            self.users.remove(user)
            return 'You are now unsubscribed.'

    @botcmd(name='status')
    def current_status(self, msg, args):
        """ Get current status """
        self.status_reload = True
        time.sleep(1)
        return '%s\nFrames sent %s' % (self.status[1], self.frames)

    @botcmd
    def frames(self, msg, args):
        """ Number of frames sent """
        return '%s' % self.frames

    @botcmd
    def reset_frames(self, msg, args):
        if not self.whitelisted(msg):
            return 'You are not allowed to do this'
        self.frames = 0

    @botcmd
    def report(self, msg, args):
        """ Identify this instance """
        return '(s) %s' %self.jid

    @botcmd
    def time(self, msg, args):
        """ Displays current server time """
        return str(datetime.datetime.now())

    @botcmd
    def gmtime(self, msg, args):
        """ Displays current server time (GMT) """
        return str(datetime.datetime.now(GMT))

    @botcmd
    def midnight(self, msg, args):
        """ Return time to midnight """
        return str(get_midnight() - datetime.datetime.now(GMT))


    @botcmd
    def die(self, msg, args):
        """ Quit """
        if not self.whitelisted(msg):
            return 'You are not allowed to do this'
        self.quit()

    def idle_proc(self):
        super(DataSender, self).idle_proc()

        if self.update_status != '':
            self.status = self.update_status
            self.update_status = ''

        if not len(self.message_queue):
            return

        messages = self.message_queue
        self.message_queue = []

        for message in messages:
            for user in self.users:
                self.send(user, message)


    def thread_sidc_status(self):
        first = True
        update_counter = 0
        while not self.thread_killed:
            res = get_sidc_config()
            if res[0] == -1:
                if self.sidc == True or first:
                    now = datetime.datetime.now()
                    self.update_status = (self.AWAY, 'Stream not '
                        'running since %s, reason %s' % (now, res[1]))

                self.sidc = False
                self.cfg = None
                logging.warning(res[1])
            else:
                if self.sidc == False or first:
                    now = datetime.datetime.now()
                    self.update_status = (self.DND, 
                        'Serving since %s' % now)

                self.sidc = True
                self.cfg = res[1]

            first = False

            update_counter += 1
            if update_counter == 5:
                self.status = self.status
                self.join_room(self.room)
                update_counter = 0

            for i in range(60):
                time.sleep(1)
                if self.thread_killed:
                    return
                if self.status_reload:
                    self.status_reload = False
                    break

    def thread_stream(self):
        file = None
        rewind = True
        midnight = get_midnight()
        pointer = 0

        while not self.thread_killed:
            if self.sidc and file is None:
                fname = datetime.datetime.now(GMT).strftime(
                    self.cfg['output_files'])

                fpath = os.path.join(self.cfg['datadir'], fname)
                logging.info('Trying to open live file [%s]' % fpath)

                file = open(fpath)
                if rewind:
                    file.seek(0, os.SEEK_END)
                pointer = file.tell()
    
            if not self.sidc and file is not None:
                file.close()
                file = None
                rewind = True
                pointer = 0

            if file is not None:
                new_lines = file.read().splitlines()
                self.frames += len(new_lines)
                for line in new_lines:
                    self.message_queue.append(line)

            if midnight < datetime.datetime.now(GMT):
                logging.info('Day changed, changing file')
                if file is not None:
                    file.close()
                    file = None
                rewind = False
                self.status_reload = True
                midnight = get_midnight()

            for i in range(2):
                time.sleep(1)
                if self.thread_killed:
                    return


defaults = '''
[config]
jid = nouser@example.org
pass = nopassword
whitelist = nouser@example.org, nouser@example.org
room = noroom@conf.example.org
'''
 
if __name__ == '__main__':
    config = ConfigParser.RawConfigParser()
    config.readfp(io.BytesIO(defaults))
    config.read('/etc/sidc_sender.conf')

    get = lambda x: config.get('config', x).strip()
    whitelist = get('whitelist').split(',')
    whitelist = map(lambda x: x.strip(), whitelist)

    room = get('room')
    logging.info('Whitelist %s' % whitelist)
    logging.info('Room %s' % room)

    bot = DataSender(get('jid'), get('pass'), whitelist, '\\')

    thread_status = threading.Thread(target = bot.thread_sidc_status)
    thread_stream = threading.Thread(target = bot.thread_stream)

    def start_threads():
        thread_status.start()
        thread_stream.start()

    bot.join_room(room)
    bot.room = room
    bot.serve_forever(connect_callback = start_threads)
    bot.thread_killed = True
